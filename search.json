[{"path":"https://mps9506.github.io/echor/CONDUCT.html","id":"contributer-code-of-conduct","dir":"","previous_headings":"","what":"Contributer Code of Conduct","title":"NA","text":"Code Conduct adaptedio.js CoC, adapted fromRust’s CoC. committed providing friendly, safe welcoming environment , regardless gender, sexual orientation, disability, ethnicity, religion, similar personal characteristic. Please avoid using overtly sexual nicknames nicknames might detract friendly, safe welcoming environment . Please kind courteous. ’s need mean rude. Respect people differences opinion every design implementation choice carries trade-numerous costs. seldom right answer. Please keep unstructured critique minimum. solid ideas want experiment , make fork see works. exclude interaction insult, demean harass anyone. welcome behaviour. interpret term “harassment” including definition Citizen Code Conduct; lack clarity might included concept, please read definition. particular, don’t tolerate behavior excludes people socially marginalized groups. Private harassment also unacceptable. matter , feel harassed made uncomfortable community member, please contact one channel ops TC members immediately capture (log, photo, email) harassment possible. Whether ’re regular contributor newcomer, care making community safe place ’ve got back. Likewise spamming, trolling, flaming, baiting attention-stealing behaviour welcome. Avoid use personal pronouns code comments documentation. need address persons explaining code (e.g. “developer”)","code":""},{"path":"https://mps9506.github.io/echor/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2018 Michael Schramm Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mps9506.github.io/echor/articles/introduction.html","id":"echor-introduction","dir":"Articles","previous_headings":"","what":"echor introduction","title":"Introduction to echor","text":"echor R package search download data US Environmental Protection Agency (EPA) Environmental Compliance History Online (ECHO). echor uses ECHO API download data directly R dataframes simple features. ECHO provides information facilities permitted emitted air pollutants discharge water bodies. ECHO also provides data reported permitted facilities volume concentration pollutants reporting time periods (typically annually air emissions monthly quarterly water discharges). ECHO provides data : Stationary sources permitted Clean Air Act, including data National Emissions Inventory, Greenhouse Gas Reporting Program, Toxics Release Inventory, Clean Air Markets Division Acid Rain Program Clean Air Interstate Rule. Public drinking water systems permitted Safe Drinking Water Act, including data Safe Drinking Water Information System. Hazardous Waste Handlers permitted Resource Conservation Recovery Act, data drawn RCRAInfo data system. Facilities permitted Clean Water Act National Pollutant Discharge Elimination Systems (NPDES) program, including data EPA’s ICIS-NPDES system possibly water body information EPA’s ATTAINS data system. echor currently provides functions retrieve information permitted air dischargers, water dischargers, public drinking water supply systems. also provides functions download discharge reports permitted air water dischargers. echor currently provide functionality retrieve RCRA data. See https://echo.epa.gov/tools/web-services information ECHO web services API functions.","code":""},{"path":"https://mps9506.github.io/echor/articles/introduction.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"Introduction to echor","text":"vignette documents key functions get started. three types functions:","code":""},{"path":"https://mps9506.github.io/echor/articles/introduction.html","id":"metadata","dir":"Articles","previous_headings":"Getting started","what":"Metadata","title":"Introduction to echor","text":"Retrieve metadata ECHO narrow specify data returned lookup parameter codes. echoAirGetMeta() - Returns variable name descriptions parameters returned air facility queries. echoSDWGetMeta() - Returns variable name descriptions parameters returned public water system queries. echoWaterGetMeta() - Returns variable name descriptions parameters returned water discharge facility queries (e.g. facilities NPDES permit). echoWaterGetParams() - Search parameter codes constituent pollutants regulated NPDES permits.","code":""},{"path":"https://mps9506.github.io/echor/articles/introduction.html","id":"query-facilities","dir":"Articles","previous_headings":"Getting started","what":"Query Facilities","title":"Introduction to echor","text":"Search return facility information based lookup parameters. echoAirGetFacilityInfo() - Returns dataframe permitted air discharge facilities associated information based lookup parameters specified user. echoSDWGetSystems() - Returns dataframe permitted air discharge facilities associated information based lookup parameters specified user. echoWaterGetFacilityInfo() - Returns dataframe permitted water discharge facilities associated information based lookup parameters specified user.","code":""},{"path":"https://mps9506.github.io/echor/articles/introduction.html","id":"reports","dir":"Articles","previous_headings":"Getting started","what":"Reports","title":"Introduction to echor","text":"Search return discharge emissions reports specified facilities. echoGetCAAPR() - Returns dataframe reported annual air emissions permitted facilities. echoGetEffluent() - Returns dataframe reported water effluent discharges permitted facilities.","code":""},{"path":[]},{"path":"https://mps9506.github.io/echor/articles/introduction.html","id":"air","dir":"Articles","previous_headings":"Sample workflows","what":"Air","title":"Introduction to echor","text":"Suppose want find facilities permitted Clean Air Act requirements. Step 1 - Identify information need returned query: dataframe includes ColumnID, can included argument specifies information want returned: qcolumns = \"1,2,3,22,23\" Step 2 - Create query. ECHO API provides numerous arguments search documented package. recommend exploring documentation : https://echo.epa.gov/tools/web-services/facility-search-air#!/Facilities/get_air_rest_services_get_facility_info. example, search geographic bounding box specify returned information qcolumns argument. argument passed ECHO echoAirGetFacilityInfo(parameter = \"value\"). echor URL encode strings automatically. Please note date argument needs entered “mm/dd/yyyy”. example arguments listed : Step 3 - Download emission inventory report permitted facility: two valid arguments echoGetCAAPR.","code":"library(echor) meta <- echoAirGetMeta() meta #> # A tibble: 376 × 6 #>    ColumnName                DataType DataLength ColumnID ObjectName Description #>    <chr>                     <chr>    <chr>      <chr>    <chr>      <chr>       #>  1 AIR_NAME                  VARCHAR2 200        1        AIRName    NA          #>  2 SOURCE_ID                 VARCHAR2 30         2        SourceID   Unique Ide… #>  3 AIR_STREET                VARCHAR2 200        3        AIRStreet  NA          #>  4 AIR_CITY                  VARCHAR2 100        4        AIRCity    NA          #>  5 AIR_STATE                 CHAR     2          5        AIRState   NA          #>  6 LOCAL_CONTROL_REGION_CODE CHAR     3          6        LocalCont… NA          #>  7 AIR_ZIP                   VARCHAR2 10         7        AIRZip     NA          #>  8 REGISTRY_ID               VARCHAR2 50         8        RegistryID An interna… #>  9 AIR_COUNTY                VARCHAR2 100        9        AIRCounty  NA          #> 10 AIR_EPA_REGION            CHAR     2          10       AIREPAReg… NA          #> # ℹ 366 more rows library(echor)  ## Retrieve information about facilities within a geographic location df <- echoAirGetFacilityInfo(output = \"df\",                              p_c1lon = '-96.387509',                              p_c1lat = '30.583572',                              p_c2lon = '-96.281422',                              p_c2lat = '30.640008',                              qcolumns = \"1,2,3,22,23\") p_fn  string  Facility Name Filter.               One or more case-insesitive facility names.               Provide multiple values as comma-delimited list               ex:               p_fn = \"Aggie Cleaners, City of Bryan, TEXAS A&M UNIVERSITY COLLEGE STATION CAMPUS\"                p_sa  string  Facility Street Address               ex:               p_sa = \"WELLBORN ROAD & UNIVERSITY DR\"                p_ct  string  Facility City               Provide a single case-insensitive city name               ex:               p_ct = \"College Station\"                p_co  string  Facility County               Provide a single county name, in combination with a state value               provided through p_st               ex:               p_co = \"Brazos\", p_st = \"Texas\"                p_fips  string  FIPS Code                 Single 5-character Federal Information Processing Standards (FIPS)                  state+county value                  p_st  string  Facility State or State Equivalent Filter               Provide one or more USPS postal abbreviations               ex:               p_st = \"TX, NC\"                p_zip string  Facility 5-Digit Zip Code               Provide one or more 5-digit postal zip codes               ex:               p_zip = \"77843, 77845\"                p_c1lon  string  Minimum longitude value in decimal degrees  p_c1lat  string  Minimum latitude value in decimal degrees  p_c2lon  string  Maximum longitude value in decimal degrees  p_c2lat  string  Maximum latitude value in decimal degrees df <- echoGetCAAPR(p_id = '110000350174') p_id    string  EPA Facility Registry Service's REGISTRY_ID.  p_units string  Units of measurement. Defaults is 'lbs'.                 Enter \"TPWE\" for toxic weighted pounds equivalents."},{"path":"https://mps9506.github.io/echor/articles/introduction.html","id":"water-facility-and-discharge-searches","dir":"Articles","previous_headings":"Sample workflows","what":"Water facility and discharge searches","title":"Introduction to echor","text":"Find facilities NPDES permits discharge wastewater: , ton possible arguments query ECHO . arguments described : https://echo.epa.gov/tools/web-services/facility-search-water#!/Facility_Information/get_cwa_rest_services_get_facility_info Commonly used arguments provided : Download discharge monitoring reports ECHO specified facilities: function retrieves single facility per call. following arguments available ECHO: Parameters codes can searched using echoWaterGetParams. Multiple DMRs can downloaded using helper function: downloadDMRs:","code":"df <- echoWaterGetFacilityInfo(p_c1lon = '-96.407563', p_c1lat = '30.554395',                                 p_c2lon = '-96.25947',  p_c2lat = '30.751984',                                 output = 'df', qcolumns = \"1,2,3,4,5,6,7\") p_fn  string  Facility Name Filter.               One or more case-insesitive facility names.               Provide multiple values as comma-delimited list               ex:               p_fn = \"Aggie Cleaners, City of Bryan, TEXAS A&M UNIVERSITY COLLEGE STATION CAMPUS\"                p_sa  string  Facility Street Address               ex:               p_sa = \"WELLBORN ROAD & UNIVERSITY DR\"                p_ct  string  Facility City               Provide a single case-insensitive city name               ex:               p_ct = \"College Station\"                p_co  string  Facility County               Provide a single county name, in combination with a state value               provided through p_st               ex:               p_co = \"Brazos\", p_st = \"Texas\"                p_fips  string  FIPS Code                 Single 5-character Federal Information Processing Standards (FIPS)                  state+county value                  p_st  string  Facility State or State Equivalent Filter               Provide one or more USPS postal abbreviations               ex:               p_st = \"TX, NC\"                p_zip string  Facility 5-Digit Zip Code               Provide one or more 5-digit postal zip codes               ex:               p_zip = \"77843, 77845\"                p_c1lon  string  Minimum longitude value in decimal degrees  p_c1lat  string  Minimum latitude value in decimal degrees  p_c2lon  string  Maximum longitude value in decimal degrees  p_c1lat  string  Maximum latitude value in decimal degrees  p_huc string  2-,4,6-,or 8-digit watershed code.               May contain comma-seperated values df <- echoGetEffluent(p_id = 'tx0119407', parameter_code = '50050') p_id            string  EPA Facility Registry Service's REGISTRY_ID.  outfall         string  Three-character code identifying the point of discharge.  parameter_code  string  Five-digit numeric code identifying the parameter.  start_date      string  Start date of interest. Must be entered as \"mm/dd/yyyy\"  end_date        string  End date of interest. Must be entered as \"mm/dd/yyyy\" echoWaterGetParams(term = \"Oxygen, dissolved\") #> # A tibble: 5 × 2 #>   ValueCode ValueDescription                      #>   <chr>     <chr>                                 #> 1 00300     Oxygen, dissolved [DO]                #> 2 51646     Oxygen, dissolved [DO] maximum        #> 3 51645     Oxygen, dissolved [DO] minimum        #> 4 00301     Oxygen, dissolved percent saturation  #> 5 00399     Oxygen, dissolved, % of time violated df <- tibble::tibble(permit = c('TX0119407', 'TX0062677')) df <- downloadDMRs(df, idColumn = permit) df <- df %>%   tidyr::unnest(dmr) tibble::glimpse(df) #> Rows: 2,479 #> Columns: 66 #> $ permit                      <chr> \"TX0119407\", \"TX0119407\", \"TX0119407\", \"TX… #> $ activity_id                 <chr> \"3602064155\", \"3602064155\", \"3602064155\", … #> $ npdes_id                    <chr> \"TX0119407\", \"TX0119407\", \"TX0119407\", \"TX… #> $ version_nmbr                <chr> \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0… #> $ perm_feature_id             <chr> \"3600435311\", \"3600435311\", \"3600435311\", … #> $ perm_feature_nmbr           <chr> \"001\", \"001\", \"001\", \"001\", \"001\", \"001\", … #> $ perm_feature_type_code      <chr> \"EXO\", \"EXO\", \"EXO\", \"EXO\", \"EXO\", \"EXO\", … #> $ perm_feature_type_desc      <chr> \"External Outfall\", \"External Outfall\", \"E… #> $ limit_set_id                <chr> \"3600478276\", \"3600478276\", \"3600478276\", … #> $ limit_set_schedule_id       <chr> \"3600684408\", \"3600684408\", \"3600684408\", … #> $ limit_id                    <chr> \"3604917385\", \"3604917385\", \"3604917385\", … #> $ limit_season_id             <chr> \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0… #> $ limit_type_code             <chr> \"ENF\", \"ENF\", \"ENF\", \"ENF\", \"ENF\", \"ENF\", … #> $ limit_begin_date            <chr> \"01/01/2020\", \"01/01/2020\", \"01/01/2020\", … #> $ limit_end_date              <chr> \"12/06/2024\", \"12/06/2024\", \"12/06/2024\", … #> $ nmbr_of_submission          <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1… #> $ parameter_code              <chr> \"00300\", \"00300\", \"00300\", \"00300\", \"00300… #> $ parameter_desc              <chr> \"Oxygen, dissolved [DO]\", \"Oxygen, dissolv… #> $ monitoring_location_code    <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1… #> $ monitoring_location_desc    <chr> \"Effluent Gross\", \"Effluent Gross\", \"Efflu… #> $ stay_type_code              <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"… #> $ stay_type_desc              <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"… #> $ limit_value_id              <chr> \"3608344130\", \"3608344130\", \"3608344130\", … #> $ limit_value_type_code       <chr> \"C1\", \"C1\", \"C1\", \"C1\", \"C1\", \"C1\", \"C1\", … #> $ limit_value_type_desc       <chr> \"Concentration1\", \"Concentration1\", \"Conce… #> $ limit_value_nmbr            <chr> \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4… #> $ limit_unit_code             <chr> \"19\", \"19\", \"19\", \"19\", \"19\", \"19\", \"19\", … #> $ limit_unit_desc             <chr> \"mg/L\", \"mg/L\", \"mg/L\", \"mg/L\", \"mg/L\", \"m… #> $ standard_unit_code          <chr> \"19\", \"19\", \"19\", \"19\", \"19\", \"19\", \"19\", … #> $ standard_unit_desc          <chr> \"mg/L\", \"mg/L\", \"mg/L\", \"mg/L\", \"mg/L\", \"m… #> $ limit_value_standard_units  <chr> \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4… #> $ statistical_base_code       <chr> \"MO\", \"MO\", \"MO\", \"MO\", \"MO\", \"MO\", \"MO\", … #> $ statistical_base_short_desc <chr> \"MO MIN\", \"MO MIN\", \"MO MIN\", \"MO MIN\", \"M… #> $ statistical_base_type_code  <chr> \"MIN\", \"MIN\", \"MIN\", \"MIN\", \"MIN\", \"MIN\", … #> $ statistical_base_type_desc  <chr> \"Minimum\", \"Minimum\", \"Minimum\", \"Minimum\"… #> $ limit_value_qualifier_code  <chr> \">=\", \">=\", \">=\", \">=\", \">=\", \">=\", \">=\", … #> $ stay_value_nmbr             <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"… #> $ dmr_event_id                <chr> \"3612968295\", \"3612968298\", \"3612968306\", … #> $ monitoring_period_end_date  <chr> \"01/31/2021\", \"02/28/2021\", \"03/31/2021\", … #> $ dmr_form_value_id           <chr> \"3788199942\", \"3788200055\", \"3788200133\", … #> $ value_type_code             <chr> \"C1\", \"C1\", \"C1\", \"C1\", \"C1\", \"C1\", \"C1\", … #> $ value_type_desc             <chr> \"Concentration1\", \"Concentration1\", \"Conce… #> $ dmr_value_id                <chr> \"3732924936\", \"3735355411\", \"3736849023\", … #> $ dmr_value_nmbr              <chr> \"5.9\", \"5.73\", \"5.6\", \"4.7\", \"5.52\", \"5.79… #> $ dmr_unit_code               <chr> \"19\", \"19\", \"19\", \"19\", \"19\", \"19\", \"19\", … #> $ dmr_unit_desc               <chr> \"mg/L\", \"mg/L\", \"mg/L\", \"mg/L\", \"mg/L\", \"m… #> $ dmr_value_standard_units    <chr> \"5.9\", \"5.73\", \"5.6\", \"4.7\", \"5.52\", \"5.79… #> $ dmr_value_qualifier_code    <chr> \"=\", \"=\", \"=\", \"=\", \"=\", \"=\", \"=\", \"=\", \"=… #> $ value_received_date         <chr> \"02/10/2021\", \"03/09/2021\", \"04/13/2021\", … #> $ days_late                   <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"… #> $ nodi_code                   <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"… #> $ nodi_desc                   <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"… #> $ exceedence_pct              <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"… #> $ npdes_violation_id          <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"… #> $ violation_code              <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"… #> $ violation_desc              <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"… #> $ rnc_detection_code          <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"… #> $ rnc_detection_desc          <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"… #> $ rnc_detection_date          <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"… #> $ rnc_resolution_code         <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"… #> $ rnc_resolution_desc         <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"… #> $ rnc_resolution_date         <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"… #> $ violation_severity          <chr> \"No Violation Identified\", \"No Violation I… #> $ dmr_due_date                <chr> \"02/20/2021\", \"03/20/2021\", \"04/20/2021\", … #> $ dmr_limit_type_code_desc    <chr> \"Enforcement\", \"Enforcement\", \"Enforcement… #> $ dmr_limit_type_desc         <chr> \"Base Permit\", \"Base Permit\", \"Base Permit…"},{"path":"https://mps9506.github.io/echor/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Schramm. Author, maintainer, copyright holder.","code":""},{"path":"https://mps9506.github.io/echor/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schramm, Michael (2023).  echor: Access EPA 'ECHO' Data.  doi:10.5281/zenodo.3635017","code":"@Manual{,   title = {{echor}: Access EPA 'ECHO' Data},   author = {Michael Schramm},   year = {2022},   url = {https://CRAN.R-project.org/package=echor},   do1 = {10.5281/zenodo.3635017},   note = {R package version 0.1.7}, }"},{"path":[]},{"path":"https://mps9506.github.io/echor/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"An R package to access EPA ECHO data","text":"echor downloads wastewater discharge air emission data EPA permitted facilities using EPA ECHO API.","code":""},{"path":"https://mps9506.github.io/echor/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R package to access EPA ECHO data","text":"echor CRAN: install development version:","code":"install.packages(\"echor\") install.packages('echor', repos = 'https://mps9506.r-universe.dev')"},{"path":"https://mps9506.github.io/echor/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"An R package to access EPA ECHO data","text":"Getting started Functions","code":""},{"path":[]},{"path":"https://mps9506.github.io/echor/index.html","id":"download-information-about-facilities-with-an-npdes-permit","dir":"","previous_headings":"Examples","what":"Download information about facilities with an NPDES permit","title":"An R package to access EPA ECHO data","text":"can look plants permit id, bounding box, numerous parameters. plan providing documentation available parameters. However, arguments can looked : get_cwa_rest_services_get_facility_info ECHO database can provide 270 different columns. echor returns subset columns work users. However, can specify data want returned. Use echoWaterGetMeta() return dataframe column numbers, names, descriptions identify columns want returned. include column numbers comma separated string qcolumns argument. example , qcolumns argument indicates dataframe include plant name, 8-digit HUC, latitude, longitude, total design flow. returned sf dataframes, data suitable immediate spatial plotting analysis note: spatial data endpoints currently appear functioning","code":"library(echor)  ## echoWaterGetFacilityInfo() will return a dataframe or simple features (sf) dataframe.  df <- echoWaterGetFacilityInfo(output = \"df\",                                 xmin = '-96.387509',                                 ymin = '30.583572',                                 xmax = '-96.281422',                                 ymax = '30.640008',                                p_ptype = \"NPD\")  head(df) #> # A tibble: 4 × 26 #>   CWPName            SourceID CWPStreet CWPCity CWPState CWPStateDistrict CWPZip #>   <chr>              <chr>    <chr>     <chr>   <chr>    <chr>            <chr>  #> 1 CARTER CREEK WWTP  TX00471… 2200 NOR… COLLEG… TX       09               77845  #> 2 CENTRAL UTILITY P… TX00027… 222 IREL… COLLEG… TX       09               77843  #> 3 HEAT TRANSFER RES… TX01065… 0.25MI S… COLLEG… TX       09               77845  #> 4 TURKEY CREEK WWTP  TX00624… 3000FT W… BRYAN   TX       09               77807  #> # ℹ 19 more variables: MasterExternalPermitNmbr <chr>, RegistryID <chr>, #> #   CWPCounty <chr>, CWPEPARegion <chr>, FacDerivedHuc <chr>, #> #   CWPNAICSCodes <chr>, FacLat <dbl>, FacLong <dbl>, #> #   CWPTotalDesignFlowNmbr <dbl>, DschToMs4 <chr>, ExposedActivity <chr>, #> #   NPDESDataGroupsDescs <chr>, MsgpFacilityInspctnSmmry <chr>, #> #   MsgpCorrectiveActionSmmry <chr>, AIRIDs <chr>, NPDESIDs <chr>, #> #   SDWAIDs <chr>, AlrExceeds1yr <dbl>, CertifiedDate <date> df <- echoWaterGetFacilityInfo(output = \"df\",                                 xmin = '-96.387509',                                 ymin = '30.583572',                                 xmax = '-96.281422',                                 ymax = '30.640008',                                qcolumns = '1,14,23,24,25',                                p_ptype = \"NPD\") head(df) #> # A tibble: 4 × 6 #>   CWPName                SourceID  FacDerivedHuc CWPNAICSCodes FacLat FacLong #>   <chr>                  <chr>     <chr>         <chr>          <dbl>   <dbl> #> 1 CARTER CREEK WWTP      TX0047163 12070103      <NA>            30.6   -96.3 #> 2 CENTRAL UTILITY PLANT  TX0002747 12070103      <NA>            30.6   -96.3 #> 3 HEAT TRANSFER RESEARCH TX0106526 12070101      <NA>            30.6   -96.4 #> 4 TURKEY CREEK WWTP      TX0062472 12070101      <NA>            30.6   -96.4 library(ggspatial) library(sf) library(ggrepel) library(purrr)  df <- echoWaterGetFacilityInfo(output = \"sf\",                                 xmin = '-96.387509',                                 ymin = '30.583572',                                 xmax = '-96.281422',                                 ymax = '30.640008',                                p_ptype = \"NPD\")  ##to make labels, need to map the coords and use geom_text :( ## can't help but think there is an easier way to do this  df <- df %>%   mutate(     coords = map(geometry, st_coordinates),     coords_x = map_dbl(coords, 1),     coords_y = map_dbl(coords, 2)   )  ggplot(df) +   annotation_map_tile(zoomin = -1, progress = \"none\") +   geom_sf(inherit.aes = FALSE, shape = 21,            color = \"darkred\", fill = \"darkred\",            size = 2, alpha = 0.25) +   geom_label_repel(data = df, aes(x = coords_x, y = coords_y, label = SourceID),                    point.padding = .5, min.segment.length = 0.1,                    size = 2, color = \"dodgerblue\") +   theme_mps_noto() +   labs(x = \"Longitude\", y = \"Latitude\",         title = \"NPDES permits near Texas A&M\",        caption = \"Source: EPA ECHO database\")"},{"path":"https://mps9506.github.io/echor/index.html","id":"download-dischargeemissions-data","dir":"","previous_headings":"Examples","what":"Download discharge/emissions data","title":"An R package to access EPA ECHO data","text":"Use echoGetEffluent() echoGetCAAPR() download tidy dataframes permitted water discharger Discharge Monitoring Report (DMR) permitted emitters Clean Air Act annual emissions reports. Please note variables returned character vectors.","code":"df <- echoGetEffluent(p_id = 'tx0119407', parameter_code = '00300')  df <- df %>%   mutate(dmr_value_nmbr = as.numeric(dmr_value_nmbr),          monitoring_period_end_date = as.Date(monitoring_period_end_date,                                               \"%m/%d/%Y\")) %>%   filter(!is.na(dmr_value_nmbr) & limit_value_type_code == \"C1\")  ggplot(df) +   geom_line(aes(monitoring_period_end_date, dmr_value_nmbr)) +   theme_mps_noto() +   labs(x = \"Monitoring period date\",        y = \"Dissolved oxygen concentration (mg/l)\",        title = \"Reported minimum dissolved oxygen concentration\",        subtitle = \"NPDES ID = TX119407\",        caption = \"Source: EPA ECHO\")"},{"path":"https://mps9506.github.io/echor/index.html","id":"session-info","dir":"","previous_headings":"","what":"Session Info","title":"An R package to access EPA ECHO data","text":"","code":"sessioninfo::platform_info() #>  setting  value #>  version  R version 4.3.1 (2023-06-16) #>  os       Ubuntu 22.04.2 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language (EN) #>  collate  C.UTF-8 #>  ctype    C.UTF-8 #>  tz       UTC #>  date     2023-06-22 #>  pandoc   2.19.2 @ /usr/bin/ (via rmarkdown) sessioninfo::package_info() #>  ! package      * version date (UTC) lib source #>    bit            4.0.5   2022-11-15 [1] CRAN (R 4.3.1) #>    bit64          4.0.5   2020-08-30 [1] CRAN (R 4.3.1) #>  P class          7.3-22  2023-05-03 [?] CRAN (R 4.3.1) #>    classInt       0.4-9   2023-02-28 [1] CRAN (R 4.3.1) #>    cli            3.6.1   2023-03-23 [1] CRAN (R 4.3.1) #>    colorspace     2.1-0   2023-01-23 [1] CRAN (R 4.3.1) #>    crayon         1.5.2   2022-09-29 [1] CRAN (R 4.3.1) #>    curl           5.0.1   2023-06-07 [1] CRAN (R 4.3.1) #>    DBI            1.1.3   2022-06-18 [1] CRAN (R 4.3.1) #>    digest         0.6.31  2022-12-11 [1] CRAN (R 4.3.1) #>    dplyr        * 1.1.2   2023-04-20 [1] CRAN (R 4.3.1) #>    e1071          1.7-13  2023-02-01 [1] CRAN (R 4.3.1) #>    echor        * 0.1.9   2023-06-22 [1] local #>    evaluate       0.21    2023-05-05 [1] CRAN (R 4.3.1) #>    fansi          1.0.4   2023-01-22 [1] CRAN (R 4.3.1) #>    farver         2.1.1   2022-07-06 [1] CRAN (R 4.3.1) #>    fastmap        1.1.1   2023-02-24 [1] CRAN (R 4.3.1) #>    fs             1.6.2   2023-04-25 [1] CRAN (R 4.3.1) #>    generics       0.1.3   2022-07-05 [1] CRAN (R 4.3.1) #>    ggplot2      * 3.4.2   2023-04-03 [1] CRAN (R 4.3.1) #>    glue           1.6.2   2022-02-24 [1] CRAN (R 4.3.1) #>    gtable         0.3.3   2023-03-21 [1] CRAN (R 4.3.1) #>    highr          0.10    2022-12-22 [1] CRAN (R 4.3.1) #>    hms            1.1.3   2023-03-21 [1] CRAN (R 4.3.1) #>    htmltools      0.5.5   2023-03-23 [1] CRAN (R 4.3.1) #>    httr           1.4.6   2023-05-08 [1] CRAN (R 4.3.1) #>    jsonlite       1.8.5   2023-06-05 [1] CRAN (R 4.3.1) #>  P KernSmooth     2.23-21 2023-05-03 [?] CRAN (R 4.3.1) #>    knitr          1.43    2023-05-25 [1] CRAN (R 4.3.1) #>    labeling       0.4.2   2020-10-20 [1] CRAN (R 4.3.1) #>    lifecycle      1.0.3   2022-10-07 [1] CRAN (R 4.3.1) #>    magrittr       2.0.3   2022-03-30 [1] CRAN (R 4.3.1) #>  P mpsTemplates * 0.2.0   2023-06-20 [?] Github (mps9506/mpsTemplates@d7a070e) #>    munsell        0.5.0   2018-06-12 [1] CRAN (R 4.3.1) #>    pillar         1.9.0   2023-03-22 [1] CRAN (R 4.3.1) #>    pkgconfig      2.0.3   2019-09-22 [1] CRAN (R 4.3.1) #>    plyr           1.8.8   2022-11-11 [1] CRAN (R 4.3.1) #>    prettyunits    1.1.1   2020-01-24 [1] CRAN (R 4.3.1) #>    progress       1.2.2   2019-05-16 [1] CRAN (R 4.3.1) #>    proxy          0.4-27  2022-06-09 [1] CRAN (R 4.3.1) #>    purrr          1.0.1   2023-01-10 [1] CRAN (R 4.3.1) #>    R6             2.5.1   2021-08-19 [1] CRAN (R 4.3.1) #>  P ragg         * 1.2.5   2023-01-12 [?] RSPM (R 4.3.0) #>    Rcpp           1.0.10  2023-01-22 [1] CRAN (R 4.3.1) #>    readr          2.1.4   2023-02-10 [1] CRAN (R 4.3.1) #>  P renv           0.17.3  2023-04-06 [?] RSPM (R 4.3.0) #>    rlang          1.1.1   2023-04-28 [1] CRAN (R 4.3.1) #>    rmarkdown      2.22    2023-06-01 [1] CRAN (R 4.3.1) #>    rstudioapi     0.14    2022-08-22 [1] CRAN (R 4.3.1) #>    scales         1.2.1   2022-08-20 [1] CRAN (R 4.3.1) #>    sessioninfo    1.2.2   2021-12-06 [1] any (@1.2.2) #>    sf             1.0-13  2023-05-24 [1] CRAN (R 4.3.1) #>    systemfonts    1.0.4   2022-02-11 [1] CRAN (R 4.3.1) #>  P textshaping    0.3.6   2021-10-13 [?] RSPM (R 4.3.0) #>    tibble         3.2.1   2023-03-20 [1] CRAN (R 4.3.1) #>    tidyr          1.3.0   2023-01-24 [1] CRAN (R 4.3.1) #>    tidyselect     1.2.0   2022-10-10 [1] CRAN (R 4.3.1) #>    tzdb           0.4.0   2023-05-12 [1] CRAN (R 4.3.1) #>    units          0.8-2   2023-04-27 [1] CRAN (R 4.3.1) #>    utf8           1.2.3   2023-01-31 [1] CRAN (R 4.3.1) #>    vctrs          0.6.3   2023-06-14 [1] CRAN (R 4.3.1) #>    vroom          1.6.3   2023-04-28 [1] CRAN (R 4.3.1) #>    withr          2.5.0   2022-03-03 [1] CRAN (R 4.3.1) #>    xfun           0.39    2023-04-20 [1] CRAN (R 4.3.1) #>    yaml           2.3.7   2023-01-23 [1] CRAN (R 4.3.1) #>  #>  [1] /home/runner/.cache/R/renv/library/echor-4ec080d0/R-4.3/x86_64-pc-linux-gnu #>  [2] /home/runner/.cache/R/renv/sandbox/R-4.3/x86_64-pc-linux-gnu/5cd49154 #>  #>  P ── Loaded and on-disk path mismatch."},{"path":"https://mps9506.github.io/echor/reference/downloadDMRs.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Multiple DMRs — downloadDMRs","title":"Download Multiple DMRs — downloadDMRs","text":"Returns DMRs nested list using echoGetEffluent(). Uses dataframe column p_id numbers. Please note p_id's case sensitive.","code":""},{"path":"https://mps9506.github.io/echor/reference/downloadDMRs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Multiple DMRs — downloadDMRs","text":"","code":"downloadDMRs(df, idColumn, pBar = TRUE, verbose = FALSE, ...)"},{"path":"https://mps9506.github.io/echor/reference/downloadDMRs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Multiple DMRs — downloadDMRs","text":"df dataframe column id numbers idColumn unquoted string, name column containing p_id permit numbers pBar logical, display progress bar? Defaults TRUE verbose logical, indicating whether provide processing retrieval messages. Defaults FALSE. Suggest leaving FALSE pBar = TRUE. ... additional arguments passed echoGetEffluent","code":""},{"path":"https://mps9506.github.io/echor/reference/downloadDMRs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Multiple DMRs — downloadDMRs","text":"dataframe df, column containing discharge monitoring reports downloaded echoGetEffluentSummary","code":""},{"path":"https://mps9506.github.io/echor/reference/downloadDMRs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Multiple DMRs — downloadDMRs","text":"","code":"# \\donttest{ ## This example requires an internet connection to run  ## Retrieve multiple DMRs for flow  df <- tibble::tibble(\"id\" = c('TX0119407', 'TX0132187')) df <- downloadDMRs(df, id) # }"},{"path":"https://mps9506.github.io/echor/reference/echoAirGetFacilityInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Downloads EPA ECHO permitted air emitter information — echoAirGetFacilityInfo","title":"Downloads EPA ECHO permitted air emitter information — echoAirGetFacilityInfo","text":"Returns dataframe simplefeature dataframe permitted facilities returned query. Uses EPA's ECHO API: https://echo.epa.gov/tools/web-services/facility-search-air#!/Facilities/get_air_rest_services_get_facility_info","code":""},{"path":"https://mps9506.github.io/echor/reference/echoAirGetFacilityInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downloads EPA ECHO permitted air emitter information — echoAirGetFacilityInfo","text":"","code":"echoAirGetFacilityInfo(output = \"df\", verbose = FALSE, ...)"},{"path":"https://mps9506.github.io/echor/reference/echoAirGetFacilityInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downloads EPA ECHO permitted air emitter information — echoAirGetFacilityInfo","text":"output Character string specifying output format. output = 'df' dataframe output = 'sf' simple features spatial dataframe. See (https://CRAN.R-project.org/package=sf) information simple features. verbose Logical, indicating whether provide processing retrieval messages. Defaults FALSE ... arguments passed query parameters request sent EPA ECHO's API. options see: https://echo.epa.gov/tools/web-services/facility-search-water#!/Facility_Information/get_air_rest_services_get_facility_info complete list parameter options. Examples provided .","code":""},{"path":"https://mps9506.github.io/echor/reference/echoAirGetFacilityInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downloads EPA ECHO permitted air emitter information — echoAirGetFacilityInfo","text":"dataframe sf dataframe suitable plotting","code":""},{"path":"https://mps9506.github.io/echor/reference/echoAirGetFacilityInfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downloads EPA ECHO permitted air emitter information — echoAirGetFacilityInfo","text":"","code":"# \\donttest{ ## These examples require an internet connection to run  ## Retrieve table of facilities by bounding box echoAirGetFacilityInfo(p_c1lon = '-96.407563', p_c1lat = '30.554395', p_c2lon = '-96.25947', p_c2lat = '30.751984', output = 'df') #> # A tibble: 40 × 7 #>    AIRName                    SourceID AIRStreet AIRCity AIRState FacLat FacLong #>    <chr>                      <chr>    <chr>     <chr>   <chr>     <dbl>   <dbl> #>  1 AGGIE CLEANERS             0600000… 111 COLL… COLLEG… TX         30.6   -96.3 #>  2 ALENCO, DIV OF RELIANT BL… TX00000… 615 CARS… BRYAN   TX         30.6   -96.4 #>  3 ALL SEASONS 1 HR CLEANERS  0600000… 2501 TEX… COLLEG… TX         30.6   -96.3 #>  4 BLUEBONNET PAVING          TX00000… HWY. 60,… COLLEG… TX         30.6   -96.3 #>  5 BRIARCREST DRY CLEANERS    0600000… 1887 BRI… BRYAN   TX         30.7   -96.3 #>  6 BRYAN CERAMICS PLANT       TX00000… 1500 IND… BRYAN   TX         30.7   -96.4 #>  7 BRYAN CLEANERS & LAUNDRY   0600000… 1803 HOL… COLLEG… TX         30.6   -96.3 #>  8 BRYAN HICKS GAS PLANT      TX00000… 3747 OLD… BRYAN   TX         30.7   -96.3 #>  9 CITGO PETROLEUM CORPORATI… TX00000… 1714 FIN… BRYAN   TX         30.7   -96.4 #> 10 CITY OF BRYAN              TX00000… 1.5 MI W… BRYAN   TX         30.6   -96.4 #> # ℹ 30 more rows  ## Retrieve a simple features dataframe by bounding box spatialdata <- echoAirGetFacilityInfo(p_c1lon = '-96.407563', p_c1lat = '30.554395', p_c2lon = '-96.25947', p_c2lat = '30.751984', output = 'sf')  # }"},{"path":"https://mps9506.github.io/echor/reference/echoAirGetMeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Downloads EPA ECHO Air Facility Metadata — echoAirGetMeta","title":"Downloads EPA ECHO Air Facility Metadata — echoAirGetMeta","text":"Returns variable name descriptions parameters returned echoAirGetFacilityInfo","code":""},{"path":"https://mps9506.github.io/echor/reference/echoAirGetMeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downloads EPA ECHO Air Facility Metadata — echoAirGetMeta","text":"","code":"echoAirGetMeta(verbose = FALSE)"},{"path":"https://mps9506.github.io/echor/reference/echoAirGetMeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downloads EPA ECHO Air Facility Metadata — echoAirGetMeta","text":"verbose Logical, indicating whether provide processing retrieval messages. Defaults FALSE","code":""},{"path":"https://mps9506.github.io/echor/reference/echoAirGetMeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downloads EPA ECHO Air Facility Metadata — echoAirGetMeta","text":"returns dataframe","code":""},{"path":"https://mps9506.github.io/echor/reference/echoAirGetMeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downloads EPA ECHO Air Facility Metadata — echoAirGetMeta","text":"","code":"# \\donttest{ ## These examples require an internet connection to run  # returns a dataframe of echoAirGetMeta() #> # A tibble: 376 × 6 #>    ColumnName                DataType DataLength ColumnID ObjectName Description #>    <chr>                     <chr>    <chr>      <chr>    <chr>      <chr>       #>  1 AIR_NAME                  VARCHAR2 200        1        AIRName    NA          #>  2 SOURCE_ID                 VARCHAR2 30         2        SourceID   Unique Ide… #>  3 AIR_STREET                VARCHAR2 200        3        AIRStreet  NA          #>  4 AIR_CITY                  VARCHAR2 100        4        AIRCity    NA          #>  5 AIR_STATE                 CHAR     2          5        AIRState   NA          #>  6 LOCAL_CONTROL_REGION_CODE CHAR     3          6        LocalCont… NA          #>  7 AIR_ZIP                   VARCHAR2 10         7        AIRZip     NA          #>  8 REGISTRY_ID               VARCHAR2 50         8        RegistryID An interna… #>  9 AIR_COUNTY                VARCHAR2 100        9        AIRCounty  NA          #> 10 AIR_EPA_REGION            CHAR     2          10       AIREPAReg… NA          #> # ℹ 366 more rows # }"},{"path":"https://mps9506.github.io/echor/reference/echoGetCAAPR.html","id":null,"dir":"Reference","previous_headings":"","what":"Download EPA ECHO emissions inventory report data — echoGetCAAPR","title":"Download EPA ECHO emissions inventory report data — echoGetCAAPR","text":"Download EPA ECHO emissions inventory report data","code":""},{"path":"https://mps9506.github.io/echor/reference/echoGetCAAPR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download EPA ECHO emissions inventory report data — echoGetCAAPR","text":"","code":"echoGetCAAPR(p_id, verbose = FALSE, ...)"},{"path":"https://mps9506.github.io/echor/reference/echoGetCAAPR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download EPA ECHO emissions inventory report data — echoGetCAAPR","text":"p_id character string specify identifier service. Required. verbose Logical, indicating whether provide processing retrieval messages. Defaults FALSE ... Additional arguments","code":""},{"path":"https://mps9506.github.io/echor/reference/echoGetCAAPR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download EPA ECHO emissions inventory report data — echoGetCAAPR","text":"dataframe","code":""},{"path":"https://mps9506.github.io/echor/reference/echoGetCAAPR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download EPA ECHO emissions inventory report data — echoGetCAAPR","text":"","code":"# \\donttest{ ## This example requires an internet connection to run  echoGetCAAPR(p_id = '110000350174') #> # A tibble: 590 × 15 #>    Name       SourceID Street City  State Zip   County Region Latitude Longitude #>    <chr>      <chr>    <chr>  <chr> <chr> <chr> <chr>  <chr>     <dbl>     <dbl> #>  1 DUKE ENER… 1100003… 801 S… WILM… NC    28401 NEW H… 04         34.3     -78.0 #>  2 DUKE ENER… 1100003… 801 S… WILM… NC    28401 NEW H… 04         34.3     -78.0 #>  3 DUKE ENER… 1100003… 801 S… WILM… NC    28401 NEW H… 04         34.3     -78.0 #>  4 DUKE ENER… 1100003… 801 S… WILM… NC    28401 NEW H… 04         34.3     -78.0 #>  5 DUKE ENER… 1100003… 801 S… WILM… NC    28401 NEW H… 04         34.3     -78.0 #>  6 DUKE ENER… 1100003… 801 S… WILM… NC    28401 NEW H… 04         34.3     -78.0 #>  7 DUKE ENER… 1100003… 801 S… WILM… NC    28401 NEW H… 04         34.3     -78.0 #>  8 DUKE ENER… 1100003… 801 S… WILM… NC    28401 NEW H… 04         34.3     -78.0 #>  9 DUKE ENER… 1100003… 801 S… WILM… NC    28401 NEW H… 04         34.3     -78.0 #> 10 DUKE ENER… 1100003… 801 S… WILM… NC    28401 NEW H… 04         34.3     -78.0 #> # ℹ 580 more rows #> # ℹ 5 more variables: Pollutant <fct>, UnitsOfMeasure <fct>, Program <fct>, #> #   Year <int>, Discharge <dbl> # }"},{"path":"https://mps9506.github.io/echor/reference/echoGetEffluent.html","id":null,"dir":"Reference","previous_headings":"","what":"Downloads EPA ECHO DMR records of dischargers with NPDES permits — echoGetEffluent","title":"Downloads EPA ECHO DMR records of dischargers with NPDES permits — echoGetEffluent","text":"Uses EPA ECHO API download Discharge Monitoring Record (DMR) single plant, identified p_id. Please note p_id case sensitive.","code":""},{"path":"https://mps9506.github.io/echor/reference/echoGetEffluent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downloads EPA ECHO DMR records of dischargers with NPDES permits — echoGetEffluent","text":"","code":"echoGetEffluent(p_id, verbose = FALSE, ...)"},{"path":"https://mps9506.github.io/echor/reference/echoGetEffluent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downloads EPA ECHO DMR records of dischargers with NPDES permits — echoGetEffluent","text":"p_id Character string specify identifier service. Required. Case sensitive. verbose Logical, indicating whether provide processing retrieval messages. Defaults FALSE ... arguments passed query parameters sent EPA's ECHO API. options see: https://echo.epa.gov/tools/web-services/effluent-charts#!/Effluent_Charts/get_eff_rest_services_get_effluent_chart","code":""},{"path":"https://mps9506.github.io/echor/reference/echoGetEffluent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downloads EPA ECHO DMR records of dischargers with NPDES permits — echoGetEffluent","text":"Returns dataframe.","code":""},{"path":"https://mps9506.github.io/echor/reference/echoGetEffluent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downloads EPA ECHO DMR records of dischargers with NPDES permits — echoGetEffluent","text":"","code":"# \\donttest{ ## This example requires an internet connection to run  ## Retrieve single DMR for flow  echoGetEffluent(p_id = 'tx0119407', parameter_code = '50050') #> # A tibble: 80 × 65 #>    activity_id npdes_id  version_nmbr perm_feature_id perm_feature_nmbr #>    <chr>       <chr>     <chr>        <chr>           <chr>             #>  1 3602064155  TX0119407 0            3600435311      001               #>  2 3602064155  TX0119407 0            3600435311      001               #>  3 3602064155  TX0119407 0            3600435311      001               #>  4 3602064155  TX0119407 0            3600435311      001               #>  5 3602064155  TX0119407 0            3600435311      001               #>  6 3602064155  TX0119407 0            3600435311      001               #>  7 3602064155  TX0119407 0            3600435311      001               #>  8 3602064155  TX0119407 0            3600435311      001               #>  9 3602064155  TX0119407 0            3600435311      001               #> 10 3602064155  TX0119407 0            3600435311      001               #> # ℹ 70 more rows #> # ℹ 60 more variables: perm_feature_type_code <chr>, #> #   perm_feature_type_desc <chr>, limit_set_id <chr>, #> #   limit_set_schedule_id <chr>, limit_id <chr>, limit_season_id <chr>, #> #   limit_type_code <chr>, limit_begin_date <chr>, limit_end_date <chr>, #> #   nmbr_of_submission <chr>, parameter_code <chr>, parameter_desc <chr>, #> #   monitoring_location_code <chr>, monitoring_location_desc <chr>, … # }"},{"path":"https://mps9506.github.io/echor/reference/echoGetFacilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Downloads permitted facility information — echoGetFacilities","title":"Downloads permitted facility information — echoGetFacilities","text":"Provides interface downloading facility information Clean Air Act, Clean Water Act, Safe Drinking Water Act permitted facilities.","code":""},{"path":"https://mps9506.github.io/echor/reference/echoGetFacilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downloads permitted facility information — echoGetFacilities","text":"","code":"echoGetFacilities(program, output = \"df\", verbose = FALSE, ...)"},{"path":"https://mps9506.github.io/echor/reference/echoGetFacilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downloads permitted facility information — echoGetFacilities","text":"program Character, either program = 'caa', program = 'cwa', program = 'sdw'. 'caa' retrieves facilities permitted Clean Air Act, 'cwa' retrieves facilities permitted Clean Water Act, 'sdw' retrieves facilities permitted Safe Drinking Water Act. output Character string specifying output format. output = 'df' dataframe output = 'sf' simple features spatial dataframe. 'sf' applies CAA CWA queries. verbose Logical, indicating whether provide processing retrieval messages. Defaults FALSE. ... arguments passed query parameters request sent EPA ECHO's API.","code":""},{"path":"https://mps9506.github.io/echor/reference/echoGetFacilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downloads permitted facility information — echoGetFacilities","text":"dataframe sf dataframe suitable plotting","code":""},{"path":"https://mps9506.github.io/echor/reference/echoGetReports.html","id":null,"dir":"Reference","previous_headings":"","what":"Downloads self reported discharge and emissions data — echoGetReports","title":"Downloads self reported discharge and emissions data — echoGetReports","text":"Downloads self reported discharge emissions data","code":""},{"path":"https://mps9506.github.io/echor/reference/echoGetReports.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downloads self reported discharge and emissions data — echoGetReports","text":"","code":"echoGetReports(program, p_id, verbose = FALSE, ...)"},{"path":"https://mps9506.github.io/echor/reference/echoGetReports.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downloads self reported discharge and emissions data — echoGetReports","text":"program Character, either program = 'caa' program = 'cwa'. 'caa' retrieves facilities permitted Clean Air Act, 'cwa' retrieves facilities permitted Clean Water Act. p_id Character string specify identifier service. Required. verbose Logical, indicating whether provide processing retrieval messages. Defaults FALSE. ... arguments passed query parameters sent EPA's ECHO API.","code":""},{"path":"https://mps9506.github.io/echor/reference/echoGetReports.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downloads self reported discharge and emissions data — echoGetReports","text":"Returns dataframe","code":""},{"path":"https://mps9506.github.io/echor/reference/echoSDWGetMeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Downloads EPA ECHO Safe Drinking Water Facilities Metadata — echoSDWGetMeta","title":"Downloads EPA ECHO Safe Drinking Water Facilities Metadata — echoSDWGetMeta","text":"Downloads EPA ECHO Safe Drinking Water Facilities Metadata","code":""},{"path":"https://mps9506.github.io/echor/reference/echoSDWGetMeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downloads EPA ECHO Safe Drinking Water Facilities Metadata — echoSDWGetMeta","text":"","code":"echoSDWGetMeta(verbose = FALSE)"},{"path":"https://mps9506.github.io/echor/reference/echoSDWGetMeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downloads EPA ECHO Safe Drinking Water Facilities Metadata — echoSDWGetMeta","text":"verbose Logical, indicating whether provide processing retrieval messages. Defaults FALSE","code":""},{"path":"https://mps9506.github.io/echor/reference/echoSDWGetMeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downloads EPA ECHO Safe Drinking Water Facilities Metadata — echoSDWGetMeta","text":"returns dataframe","code":""},{"path":"https://mps9506.github.io/echor/reference/echoSDWGetMeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downloads EPA ECHO Safe Drinking Water Facilities Metadata — echoSDWGetMeta","text":"","code":"# \\donttest{ ## These examples require an internet connection to run  # returns a dataframe of echoSDWGetMeta() #> # A tibble: 78 × 6 #>    ColumnName       DataType DataLength ColumnID ObjectName     Description #>    <chr>            <chr>    <chr>      <chr>    <chr>          <lgl>       #>  1 PWS_NAME         VARCHAR2 100        1        PWSName        NA          #>  2 PWSID            VARCHAR2 9          2        PWSId          NA          #>  3 CITIES_SERVED    VARCHAR2 4000       3        CitiesServed   NA          #>  4 STATE_CODE       VARCHAR2 2          4        StateCode      NA          #>  5 ZIP_CODES_SERVED VARCHAR2 4000       5        ZipCodesServed NA          #>  6 COUNTIES_SERVED  VARCHAR2 4000       6        CountiesServed NA          #>  7 EPA_REGION       VARCHAR2 2          7        EPARegion      NA          #>  8 REGISTRY_ID      VARCHAR2 50         8        RegistryID     NA          #>  9 INDIAN_COUNTRY   CHAR     1          9        IndianCountry  NA          #> 10 PWS_TYPE_CODE    VARCHAR2 6          10       PWSTypeCode    NA          #> # ℹ 68 more rows # }"},{"path":"https://mps9506.github.io/echor/reference/echoSDWGetSystems.html","id":null,"dir":"Reference","previous_headings":"","what":"Downloads public water system information — echoSDWGetSystems","title":"Downloads public water system information — echoSDWGetSystems","text":"Returns dataframe permitted public water systems returned query. Uses EPA's ECHO API: https://echo.epa.gov/tools/web-services/facility-search-drinking-water#!/Safe_Drinking_Water/get_sdw_rest_services_get_systems.","code":""},{"path":"https://mps9506.github.io/echor/reference/echoSDWGetSystems.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downloads public water system information — echoSDWGetSystems","text":"","code":"echoSDWGetSystems(verbose = FALSE, ...)"},{"path":"https://mps9506.github.io/echor/reference/echoSDWGetSystems.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downloads public water system information — echoSDWGetSystems","text":"verbose Logical, indicating whether provide processing retrieval messages. Defaults FALSE ... arguments passed query parameters request sent EPA ECHO's API. options see: https://echo.epa.gov/tools/web-services/facility-search-drinking-water#!/Safe_Drinking_Water/get_sdw_rest_services_get_systems complete list parameter options. Examples provided .","code":""},{"path":"https://mps9506.github.io/echor/reference/echoSDWGetSystems.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downloads public water system information — echoSDWGetSystems","text":"returns dataframe","code":""},{"path":"https://mps9506.github.io/echor/reference/echoSDWGetSystems.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downloads public water system information — echoSDWGetSystems","text":"","code":"# \\donttest{ ## These examples require an internet connection to run echoSDWGetSystems(p_co = \"Brazos\", p_st = \"tx\") #> # A tibble: 40 × 76 #>    PWSName  PWSId CitiesServed StateCode ZipCodesServed CountiesServed EPARegion #>    <chr>    <chr> <chr>        <chr>     <chr>          <chr>          <chr>     #>  1 ABBATE … TX02… NA           TX        NA             Brazos         06        #>  2 AL LEON… TX02… NA           TX        NA             Brazos         06        #>  3 B J'S C… TX02… NA           TX        NA             Brazos         06        #>  4 BENCHLE… TX02… NA           TX        NA             Brazos         06        #>  5 BOBBITT… TX02… NA           TX        NA             Brazos         06        #>  6 BRUSHY … TX02… NA           TX        NA             Brazos         06        #>  7 CAFE SU… TX02… NA           TX        NA             Brazos         06        #>  8 CAROUSE… TX02… NA           TX        NA             Brazos         06        #>  9 CITY OF… TX02… NA           TX        NA             Brazos         06        #> 10 CITY OF… TX02… NA           TX        NA             Brazos         06        #> # ℹ 30 more rows #> # ℹ 69 more variables: RegistryID <chr>, IndianCountry <chr>, #> #   PWSTypeCode <chr>, PWSTypeDesc <chr>, PrimarySourceCode <chr>, #> #   PrimarySourceDesc <chr>, PopulationServedCount <dbl>, #> #   PWSActivityCode <chr>, PWSActivityDesc <chr>, OwnerTypeCode <chr>, #> #   OwnerDesc <chr>, QtrsWithVio <dbl>, QtrsWithSNC <dbl>, #> #   SeriousViolator <chr>, HealthFlag <chr>, MrFlag <chr>, PnFlag <chr>, … # }"},{"path":"https://mps9506.github.io/echor/reference/echoWaterGetFacilityInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Downloads EPA ECHO water facility information — echoWaterGetFacilityInfo","title":"Downloads EPA ECHO water facility information — echoWaterGetFacilityInfo","text":"Returns dataframe simplefeature dataframe permitted facilities returned query. Uses EPA's ECHO API: https://echo.epa.gov/tools/web-services/facility-search-water.","code":""},{"path":"https://mps9506.github.io/echor/reference/echoWaterGetFacilityInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downloads EPA ECHO water facility information — echoWaterGetFacilityInfo","text":"","code":"echoWaterGetFacilityInfo(output = \"df\", verbose = FALSE, ...)"},{"path":"https://mps9506.github.io/echor/reference/echoWaterGetFacilityInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downloads EPA ECHO water facility information — echoWaterGetFacilityInfo","text":"output Character string specifying output format. output = 'df' dataframe output = 'sf' simple features spatial dataframe. See (https://CRAN.R-project.org/package=sf) information simple features. verbose Logical, indicating whether provide processing retrieval messages. Defaults FALSE ... arguments passed query parameters request sent EPA ECHO's API. options see: https://echo.epa.gov/tools/web-services/facility-search-water#!/Facility_Information/get_cwa_rest_services_get_facility_info complete list parameter options. Examples provided .","code":""},{"path":"https://mps9506.github.io/echor/reference/echoWaterGetFacilityInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downloads EPA ECHO water facility information — echoWaterGetFacilityInfo","text":"returns dataframe simple features dataframe","code":""},{"path":"https://mps9506.github.io/echor/reference/echoWaterGetFacilityInfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downloads EPA ECHO water facility information — echoWaterGetFacilityInfo","text":"","code":"# \\donttest{ ## These examples require an internet connection to run  ## Retrieve table of facilities by bounding box echoWaterGetFacilityInfo(p_c1lon = '-96.407563', p_c1lat = '30.554395', p_c2lon = '-96.25947', p_c2lat = '30.751984', p_pcomp = 'POT', output = 'df') #> # A tibble: 4 × 26 #>   CWPName            SourceID CWPStreet CWPCity CWPState CWPStateDistrict CWPZip #>   <chr>              <chr>    <chr>     <chr>   <chr>    <chr>            <chr>  #> 1 BURTON CREEK WWTP  TX00226… 300 PARK… BRYAN   TX       09               77802  #> 2 CARTERS CREEK WWTP TX00471… 2200 NOR… COLLEG… TX       09               77845  #> 3 TAMU MAIN CAMPUS … TX01081… 9685 WHI… COLLEG… TX       09               77843  #> 4 TURKEY CREEK WWTP  TX00624… 3000FT W… BRYAN   TX       09               77807  #> # ℹ 19 more variables: MasterExternalPermitNmbr <chr>, RegistryID <chr>, #> #   EPASystem <chr>, Statute <chr>, FacStdCountyName <chr>, #> #   CWPNAICSCodes <chr>, FacLat <dbl>, FacLong <dbl>, #> #   CWPTotalDesignFlowNmbr <dbl>, AIRIDs <chr>, CensusBlockGroup <chr>, #> #   MileavgOver90CountSt <dbl>, MileOver90CountSt <dbl>, #> #   SupOver80CountUsSearch <chr>, SupMileavgOver80CountUs <dbl>, #> #   SupMileOver80CountUs <dbl>, SupMileOver80CountUsSearch <chr>, …  ## Retrieve a simple features dataframe by bounding box spatialdata <- echoWaterGetFacilityInfo(p_c2lon = '-96.407563', p_c1lat = '30.554395', p_c2lon = '-96.25947', p_c2lat = '30.751984', p_pcomp = 'POT', output = 'sf') #> A bounding box query requires that latitude and longitude values for two corners are provided.  # }"},{"path":"https://mps9506.github.io/echor/reference/echoWaterGetMeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Downloads EPA ECHO Water Facility Metadata — echoWaterGetMeta","title":"Downloads EPA ECHO Water Facility Metadata — echoWaterGetMeta","text":"Returns variable name descriptions parameters returned echoWaterGetFacilityInfo","code":""},{"path":"https://mps9506.github.io/echor/reference/echoWaterGetMeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downloads EPA ECHO Water Facility Metadata — echoWaterGetMeta","text":"","code":"echoWaterGetMeta(verbose = FALSE)"},{"path":"https://mps9506.github.io/echor/reference/echoWaterGetMeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downloads EPA ECHO Water Facility Metadata — echoWaterGetMeta","text":"verbose Logical, indicating whether provide processing retrieval messages. Defaults FALSE","code":""},{"path":"https://mps9506.github.io/echor/reference/echoWaterGetMeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downloads EPA ECHO Water Facility Metadata — echoWaterGetMeta","text":"returns dataframe","code":""},{"path":"https://mps9506.github.io/echor/reference/echoWaterGetMeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downloads EPA ECHO Water Facility Metadata — echoWaterGetMeta","text":"","code":"# \\donttest{ ## These examples require an internet connection to run  # returns a dataframe of echoWaterGetMeta() #> # A tibble: 464 × 6 #>    ColumnName                DataType DataLength ColumnID ObjectName Description #>    <chr>                     <chr>    <chr>      <chr>    <chr>      <chr>       #>  1 CWP_NAME                  VARCHAR2 200        1        CWPName    Facility o… #>  2 SOURCE_ID                 VARCHAR2 30         2        SourceID   Unique Ide… #>  3 CWP_STREET                VARCHAR2 200        3        CWPStreet  Facility s… #>  4 CWP_CITY                  VARCHAR2 100        4        CWPCity    City in wh… #>  5 CWP_STATE                 CHAR     2          5        CWPState   Facility l… #>  6 CWP_STATE_DISTRICT        VARCHAR2 5          6        CWPStateD… The State … #>  7 CWP_ZIP                   VARCHAR2 10         7        CWPZip     Facility Z… #>  8 MASTER_EXTERNAL_PERMIT_N… VARCHAR2 9          8        MasterExt… This is th… #>  9 REGISTRY_ID               VARCHAR2 50         9        RegistryID An interna… #> 10 EPA_SYSTEM                VARCHAR2 10         10       EPASystem  The EPA da… #> # ℹ 454 more rows # }"},{"path":"https://mps9506.github.io/echor/reference/echoWaterGetParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Search parameter codes for Clean Water Act permits on EPA ECHO — echoWaterGetParams","title":"Search parameter codes for Clean Water Act permits on EPA ECHO — echoWaterGetParams","text":"Returns dataframe parameter codes descriptions.","code":""},{"path":"https://mps9506.github.io/echor/reference/echoWaterGetParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search parameter codes for Clean Water Act permits on EPA ECHO — echoWaterGetParams","text":"","code":"echoWaterGetParams(term = NULL, code = NULL, verbose = FALSE)"},{"path":"https://mps9506.github.io/echor/reference/echoWaterGetParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search parameter codes for Clean Water Act permits on EPA ECHO — echoWaterGetParams","text":"term Character string specifying parameter search term. Partial complete search phrase word. code Character string specifying parameter search code value. verbose Logical, indicating whether provide processing retrieval messages. Defaults FALSE","code":""},{"path":"https://mps9506.github.io/echor/reference/echoWaterGetParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search parameter codes for Clean Water Act permits on EPA ECHO — echoWaterGetParams","text":"Returns dataframe.","code":""},{"path":"https://mps9506.github.io/echor/reference/echoWaterGetParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search parameter codes for Clean Water Act permits on EPA ECHO — echoWaterGetParams","text":"","code":"# \\donttest{ ## These examples require an internet connection to run  ## Retrieve parameter codes for dissolved oxygen echoWaterGetParams(term = \"Oxygen, dissolved\") #> # A tibble: 5 × 2 #>   ValueCode ValueDescription                      #>   <chr>     <chr>                                 #> 1 00300     Oxygen, dissolved [DO]                #> 2 51646     Oxygen, dissolved [DO] maximum        #> 3 51645     Oxygen, dissolved [DO] minimum        #> 4 00301     Oxygen, dissolved percent saturation  #> 5 00399     Oxygen, dissolved, % of time violated  echoWaterGetParams(code = \"00300\") #> # A tibble: 1 × 2 #>   ValueCode ValueDescription       #>   <chr>     <chr>                  #> 1 00300     Oxygen, dissolved [DO] # }"},{"path":"https://mps9506.github.io/echor/reference/resp_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Check responses — resp_check","title":"Check responses — resp_check","text":"Checks valid server response passes silently produces useful message.","code":""},{"path":"https://mps9506.github.io/echor/reference/resp_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check responses — resp_check","text":"","code":"resp_check(response)"},{"path":"https://mps9506.github.io/echor/reference/resp_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check responses — resp_check","text":"response response [httr::GET()] request result returned API","code":""},{"path":"https://mps9506.github.io/echor/reference/resp_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check responses — resp_check","text":"nothing check passed, informative message passed.","code":""},{"path":"https://mps9506.github.io/echor/news/index.html","id":"echor-0199999-in-development","dir":"Changelog","previous_headings":"","what":"echor 0.1.9.9999 (in development)","title":"echor 0.1.9.9999 (in development)","text":"Update examples echoWaterGetFacilityInfo(). allowable values p_pcomp changed EPA resulting zero values returned. (fixes #94) longer (unknown) upper limit values returned requesting sf dataframe. Previously, ECHO returned “clusters” instead records large number records requested. ECHO provides different endpoint request clusters. package currently provide function access clusters endpoint.","code":""},{"path":"https://mps9506.github.io/echor/news/index.html","id":"echor-019","dir":"Changelog","previous_headings":"","what":"echor 0.1.9","title":"echor 0.1.9","text":"CRAN release: 2023-06-22 server responses != 200 202, functions return invisible NULL message instead error message. (fixes #87) removed geojsonsf dependency. _getFacilityInfo() functions return invisible NULL message instead stopping error many records requested sf format.","code":""},{"path":"https://mps9506.github.io/echor/news/index.html","id":"echor-018","dir":"Changelog","previous_headings":"","what":"echor 0.1.8","title":"echor 0.1.8","text":"CRAN release: 2023-04-23","code":""},{"path":"https://mps9506.github.io/echor/news/index.html","id":"bug-fixes-0-1-8","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"echor 0.1.8","text":"various _getFacilityInfo() functions now properly return records 100,000 records returned. (fixes #79) _getFacilityInfo() functions stop message returned many records requested sf format.","code":""},{"path":"https://mps9506.github.io/echor/news/index.html","id":"internal-changes-0-1-8","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"echor 0.1.8","text":"remove use rlang::dots_values() avoid upcoming soft depreciation. (fixes #77)","code":""},{"path":"https://mps9506.github.io/echor/news/index.html","id":"echor-017","dir":"Changelog","previous_headings":"","what":"echor 0.1.7","title":"echor 0.1.7","text":"CRAN release: 2023-02-13","code":""},{"path":"https://mps9506.github.io/echor/news/index.html","id":"minor-changes-0-1-7","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"echor 0.1.7","text":"update email address author maintainer. reduced dependencies moving spatial examples pkgdown articles.","code":""},{"path":"https://mps9506.github.io/echor/news/index.html","id":"bug-fixes-0-1-7","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"echor 0.1.7","text":"update url endpoint metadata services.","code":""},{"path":"https://mps9506.github.io/echor/news/index.html","id":"internal-changes-0-1-7","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"echor 0.1.7","text":"update pkgdown use template consistency packages. remove rlang::.data selectors compatibility new versions purrr tidyselect. fixed messages introduced new versions readr/vroom columns NA. vignette longer built CRAN reduce package dependencies, see pkgdown website documentation remove depreciated dplyr based progress bar function use progress package. functions provide message return nothing nslookup fails.","code":""},{"path":"https://mps9506.github.io/echor/news/index.html","id":"echor-016","dir":"Changelog","previous_headings":"","what":"echor 0.1.6","title":"echor 0.1.6","text":"CRAN release: 2021-08-21","code":""},{"path":"https://mps9506.github.io/echor/news/index.html","id":"bug-fixes-0-1-6","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"echor 0.1.6","text":"Removed TidyData DESCRIPTION. Fix output echoGetCAAPR(). Update base URL used webservice.","code":""},{"path":"https://mps9506.github.io/echor/news/index.html","id":"echor-015","dir":"Changelog","previous_headings":"","what":"echor 0.1.5","title":"echor 0.1.5","text":"CRAN release: 2020-08-05","code":""},{"path":"https://mps9506.github.io/echor/news/index.html","id":"minor-changes-0-1-5","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"echor 0.1.5","text":"httr::RETRY() used throughout. (fixes #49) Add CITATION. vignette readme use ggspatial instead ggmap. (fixes #52)","code":""},{"path":"https://mps9506.github.io/echor/news/index.html","id":"echor-014","dir":"Changelog","previous_headings":"","what":"echor 0.1.4","title":"echor 0.1.4","text":"CRAN release: 2020-01-29 downloadDMRs() passes arguments properly. fixes #43.","code":""},{"path":"https://mps9506.github.io/echor/news/index.html","id":"echor-013","dir":"Changelog","previous_headings":"","what":"echor 0.1.3","title":"echor 0.1.3","text":"CRAN release: 2019-09-18","code":""},{"path":"https://mps9506.github.io/echor/news/index.html","id":"major-changes-possibly-breaking-0-1-3","dir":"Changelog","previous_headings":"","what":"Major Changes (possibly breaking)","title":"echor 0.1.3","text":"echoGetEffluent() downloadDMRs() return columns (nested columns) characters .","code":""},{"path":"https://mps9506.github.io/echor/news/index.html","id":"minor-changes-0-1-3","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"echor 0.1.3","text":"fix vignette (closes #44) import tidyr (v1.0.0) utilize httptest unit testing","code":""},{"path":"https://mps9506.github.io/echor/news/index.html","id":"echor-012","dir":"Changelog","previous_headings":"","what":"echor 0.1.2","title":"echor 0.1.2","text":"CRAN release: 2019-02-03","code":""},{"path":"https://mps9506.github.io/echor/news/index.html","id":"new-functions-0-1-2","dir":"Changelog","previous_headings":"","what":"New functions","title":"echor 0.1.2","text":"downloadDMRs() Returns tidy dataframe dmr reports. (closes #38)","code":""},{"path":"https://mps9506.github.io/echor/news/index.html","id":"updated-functions-0-1-2","dir":"Changelog","previous_headings":"","what":"Updated functions","title":"echor 0.1.2","text":"echoGetEffluent() uses different API call returns flat dmr report (one plant time). Existing arguments remain still returns dataframe. (closes #37)","code":""},{"path":"https://mps9506.github.io/echor/news/index.html","id":"echor-011","dir":"Changelog","previous_headings":"","what":"echor 0.1.1","title":"echor 0.1.1","text":"CRAN release: 2018-09-11 Single function returns air water data; echoGetFacilities() echoGetReports() wrap individual functions streamline functions users need familiar . (closes #33) Added echoWaterGetMeta() echoAirGetMeta() functions retrieve column metadata returned echoWaterGetFacilityInfo() echoAirGetFacilityInfo(); specify columns returned respective functions including qcolumns argument respective functions. (closes #28). Added default qcolumns argument echoWaterGetFacilityInfo() ensure reasonable default columns returned (#29). echoWaterGetFacilityInfo() properly returns large datasets. new internal function getDownload() downloads entire CSV queried data dataframe (closes #27). Added default qcolumns argument echoAirGetFacilityInfo() ensure reasonable default columns returned (#29). echoAirGetFacilityInfo() properly returns large datasets. new internal function getDownload() downloads entire CSV queried data dataframe (closes #27). echoSDWGetSystems() downloads data public drinking water systems. echoSDWGetMeta() downloads metadata columns returned echoSDWGetSystems() Unit tests functions rely EPA ECHO API utilize skip_on_cran() instead httptest::with_mock_API() Imported functions called explicitly eg. pkg::fun()","code":""},{"path":"https://mps9506.github.io/echor/news/index.html","id":"echor-010","dir":"Changelog","previous_headings":"","what":"echor 0.1.0","title":"echor 0.1.0","text":"CRAN release: 2018-04-23 Added NEWS.md file track changes package. Initial Release","code":""}]
